import React, { useState, useEffect, useContext } from 'react';
import api from '../services/api';
import AuthContext from '../contexts/AuthContext';
import { toast } from 'react-toastify';
import './GeneratePage.css'; // ‚¨ÖÔ∏è Add your custom styles here

export default function GeneratePage() {
  const { logout, user} = useContext(AuthContext);
  const [t, setT] = useState('298');
  const [k_0, setk0] = useState('0.001');
  const [z, setZ] = useState('1');
  const [epsilon_sl, setEpsilon] = useState('78.5');
  const [frequencies, setFrequencies] = useState(['1', '6', '1000']);
  const [concentrations, setConcentrations] = useState(['2', '5', '50']);
  const [mobilities, setMobilities] = useState(['0.0001', '0.1', '50']);
  const [title, setTitle] = useState('')
  const [result, setResult] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [files, setFiles] = useState([]);
  const [filesLoading, setFilesLoading] = useState(false);
  const [filesFetched, setFilesFetched] = useState(false);

  

  const handleArrayChange = (setter, arr, index, value) => {
    const newArr = [...arr];
    newArr[index] = value;
    setter(newArr);
  };

  const fetchFiles = async () => {
    setFilesLoading(true);
    try {
      const res = await api.get(`/eis/history`);
      setFiles(res.data);
    } catch (err) {
      toast.error('–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏');
    } finally {
      setFilesLoading(false);
    }
  };

  useEffect(() => {
    if (!filesFetched) {
      fetchFiles();
      setFilesFetched(true);
    }
  }, [filesFetched]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setResult('');
    setLoading(true);
    try {
      const payload = {
        T: Number(t),
        k_0: Number(k_0),
        z: Number(z),
        epsilon_sl: Number(epsilon_sl),
        frequencies: frequencies.map(Number),
        concentrations: concentrations.map(Number),
        mobilities: mobilities.map(Number),
        title,
      };
      const res = await api.post('/eis/generate', payload);
      setResult(res.data.downloadUrl);
      toast.success('CSV —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∏—Å—å!');
      fetchFiles();
    } catch (err) {
      toast.error(err.response?.data?.message || '–ü–æ–º–∏–ª–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="generate-page">
      <header className="generate-header">
        <h2>üìä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å—Ç–æ—Ä—É –æ–∑–Ω–∞–∫ –µ–ª–µ–∫—Ç—Ä–æ—Ö—ñ–º—ñ—á–Ω–æ-—ñ–º–ø–µ–¥–∞–Ω—Å–Ω–∏—Ö —Å–ø–µ–∫—Ç—Ä—ñ–≤</h2>
        {user && <div className="user-name">üë§ {user.email}</div>}
        <button className="logout-button" onClick={logout}>–í–∏–π—Ç–∏</button>
      </header>
      

      <form className="generate-form" onSubmit={handleSubmit}>
        <div className='section'>
            <label>–ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É</label>
            <input value={title} onChange={(e) => setTitle(e.target.value)} required />
        </div>
        <div className="section">
          {[{ label: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤—ñ–Ω–∞—Ö', value: t, setter: setT },
            { label: '–°—Ç–∞–ª–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ —Ä–µ–∞–∫—Ü—ñ—ó', value: k_0, setter: setk0 },
            { label: '–ó–∞—Ä—è–¥ —ñ–æ–Ω—ñ–≤', value: z, setter: setZ },
            { label: '–í—ñ–¥–Ω–æ—Å–Ω–∞ –¥—ñ–µ–ª–µ–∫—Ç—Ä–∏—á–Ω–∞ –ø—Ä–æ–Ω–∏–∫–Ω—ñ—Å—Ç—å —Ä–æ–∑—á–∏–Ω—É', value: epsilon_sl, setter: setEpsilon }].map((field) => (
              <div key={field.label} className="form-group">
                <label>{field.label}</label>
                <input type="number" value={field.value} onChange={(e) => field.setter(e.target.value)} required />
              </div>
          ))}
        </div>

        {[
          { label: '–î—ñ–∞–ø–∞–∑–æ–Ω —á–∞—Å—Ç–æ—Ç –ì—Ü (—É –ª–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–æ–º—É (–≤—ñ–¥, –¥–æ, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω—å))', arr: frequencies, setter: setFrequencies },
          { label: '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó ppm (—É –ª–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–æ–º—É (–≤—ñ–¥, –¥–æ, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω—å))', arr: concentrations, setter: setConcentrations },
          { label: '–†—É—Ö–ª–∏–≤–æ—Å—Ç—ñ –º2/–í¬∑—Å (—É –ª—ñ–Ω—ñ–π–Ω–æ–º—É(–≤—ñ–¥, –¥–æ, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω—å))', arr: mobilities, setter: setMobilities },
        ].map(({ label, arr, setter }) => (
          <div key={label} className="section">
            <label>{label}</label>
            <div className="input-array">
              {arr.map((val, i) => (
                <input
                  key={i}
                  type="number"
                  value={val}
                  onChange={(e) => handleArrayChange(setter, arr, i, e.target.value)}
                  required
                />
              ))}
            </div>
          </div>
        ))}

        <button type="submit" className="generate-button" disabled={loading}>
          {loading ? '–ì–µ–Ω–µ—Ä—É—î–º–æ...' : '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ CSV'}
        </button>
        <button
          type="button"
          className="generate-button"
          style={{ marginLeft: '10px' }}
          onClick={() => {
            const text = `# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
        !pip install boto3

        import boto3
        import pandas as pd
        from io import StringIO

        # –î–∞–Ω—ñ –¥–æ—Å—Ç—É–ø—É 
        aws_access_key_id = '${import.meta.env.aws_access_key_id }'
        aws_secret_access_key = '${import.meta.env.aws_secret_access_key }'
        bucket_name = 'eisgenerator'
        s3_file_key = '–í–í–ï–î–Ü–¢–¨ –°–Æ–î–ò –®–õ–Ø–• –î–û –ü–û–¢–†–Ü–ë–ù–û–ì–û –§–ê–ô–õ–£'  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 'data/myfile.csv'

        s3_client = boto3.client(
            's3',
            aws_access_key_id=aws_access_key_id,
            aws_secret_access_key=aws_secret_access_key
        )

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤ –ø–∞–º—è—Ç—å
        response = s3_client.get_object(Bucket=bucket_name, Key=s3_file_key)
        csv_content = response['Body'].read().decode('utf-8')

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —è–∫ pandas DataFrame
        df = pd.read_csv(StringIO(csv_content))

        # –í–∏–≤—ñ–¥ –ø–µ—Ä—à–∏—Ö —Ä—è–¥–∫—ñ–≤
        df.head()`;

            const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });
            const url = URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = 'aws_s3_load_example.txt';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
          }}
        >
          üìÑ –°–∫—Ä–∏–ø—Ç –¥–ª—è Google Colab
        </button>

      </form>

      {result && (
        <a href={result} download className="download-link" target="_blank" rel="noopener noreferrer">
          ‚¨áÔ∏è Download CSV
        </a>
      )}

      <hr />

      <section className="file-list-section">
        <h3>üìÅ –í–∞—à—ñ CSV —Ñ–∞–π–ª–∏</h3>
        {filesLoading ? (
          <p>–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª–∏...</p>
        ) : files.length === 0 ? (
          <p>–§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>
        ) : (
          <ul className="file-list">
            {files.map((file, i) => (
              <li key={i}>
                <a href={file.signedUrl} target="_blank" rel="noopener noreferrer" download>
                  üìÑ {file.name} ({file.size}) ‚Äî {new Date(file.createdAt).toLocaleString()}
                </a>
                {file.s3Key && (
                  <div className="s3key-display">üîë S3 —à–ª—è—Ö: <code>{file.s3Key}</code></div>
                )}
              </li>
            ))}
          </ul>
        )}
      </section>
    </div>
  );
}
